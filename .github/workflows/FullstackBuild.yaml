name: Fullstack Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
    - uses: actions/checkout@v4

    # --- Set up .NET ---
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # --- Build Backend ---
    - name: Restore backend dependencies
      run: dotnet restore ./Project.App/Project.Api/Project.Api.csproj

    - name: Build backend
      run: dotnet build ./Project.App/Project.Api/Project.Api.csproj --no-restore

    - name: Test backend
      run: dotnet test ./Project.App/Project.Test/Project.Test.csproj --no-build --verbosity normal
    
    - name: Check backend formatting
      id: backend_format_check
      run: |
        dotnet tool restore

        set +e # temporarily disable 'exit on error'
        OUTPUT=$(dotnet csharpier check . 2>&1)
        EXIT_CODE=$?
        set -e # re-enable 'exit on error'

        echo "output<<EOF" >> $GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # if check failed, explicitly exit with failure
        if [ $EXIT_CODE -ne 0 ]; then
          exit 1
        fi
      continue-on-error: true

    # --- Set up Node.js ---
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 24.10.0

    - name: Cache node modules for next.js
      uses: actions/cache@v4
      with:
        # via https://nextjs.org/docs/pages/guides/ci-build-caching
        path: ${{ github.workspace }}/Project.App/Project.Client/.next/cache
        key: ${{ runner.os }}-nextjs-build-${{ hashFiles('Project.App/Project.Client/package-lock.json') }}-${{ hashFiles('Project.App/Project.Client/**/*.js', 'Project.App/Project.Client/**/*.jsx', 'Project.App/Project.Client/**/*.ts', 'Project.App/Project.Client/**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-build-${{ hashFiles('Project.App/Project.Client/package-lock.json') }}-
          ${{ runner.os }}-nextjs-build-

    # --- Build Frontend ---
    - name: Install frontend dependencies
      working-directory: ./Project.App/Project.Client
      run: npm install

    - name: Build frontend
      working-directory: ./Project.App/Project.Client
      run: npm run build
    
    - name: Lint frontend
      working-directory: ./Project.App/Project.Client
      run: npm run lint
    
    - name: Check frontend formatting
      id: frontend_format_check
      working-directory: ./Project.App/Project.Client
      run: |
        set +e # temporarily disable 'exit on error'
        OUTPUT=$(npm run format:check -- --no-color 2>&1)
        EXIT_CODE=$?
        set -e # re-enable 'exit on error'

        echo "output<<EOF" >> $GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # if check failed, explicitly exit with failure
        if [ $EXIT_CODE -ne 0 ]; then
          exit 1
        fi
      continue-on-error: true
    
    # --- Complain if formatting checks fail ---
    - name: Add PR comment if formatting checks fail
      if: github.event_name == 'pull_request' && (steps.backend_format_check.outcome == 'failure' || steps.frontend_format_check.outcome == 'failure')
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required for gh CLI to authenticate
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        COMMENT_BODY="### Formatting Issues Detected!\n\n"
        HAS_ISSUES=false

        if [ "${{ steps.backend_format_check.outcome }}" == "failure" ]; then
          COMMENT_BODY+="- **Backend (Csharpier):** Please run \`dotnet csharpier .\` to fix formatting.\n"
          # add collapsible section for backend output
          COMMENT_BODY+="<details><summary>View Csharpier output</summary>\n\n\`\`\`\n${{ steps.backend_format_check.outputs.output }}\n\`\`\`\n\n</details>\n\n"
          HAS_ISSUES=true
        fi
        if [ "${{ steps.frontend_format_check.outcome }}" == "failure" ]; then
          COMMENT_BODY+="- **Frontend (Prettier):** Please run \`npm run format\` in \`Project.App/Project.Client\` to fix formatting.\n"
          # add collapsible section for frontend output
          COMMENT_BODY+="<details><summary>View Prettier output</summary>\n\n\`\`\`\n${{ steps.frontend_format_check.outputs.output }}\n\`\`\`\n\n</details>\n\n"
          HAS_ISSUES=true
        fi

        if [ "$HAS_ISSUES" = true ]; then
          echo "Commenting on PR #$PR_NUMBER"
          echo -e "$COMMENT_BODY" | gh pr comment "$PR_NUMBER" --body-file -
        else
          echo "Nevermind, no formatting issues detected. Skipping PR comment."
        fi
